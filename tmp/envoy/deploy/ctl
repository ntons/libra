#!/bin/bash

# libractl operation
# operation:
#   start:   make sure container is started
#            state=started
#   stop:    make sure container is stopped
#            state=stopped
#   restart: stop and start container
#            state=started, restart=yes
#   update:  pull latest image and force recreate container
#            state=present, pull=yes, recreate=yes
#   clear:   make sure container is absent
#            state=absent

function start() {
    echo $ANSIBLE_OPTIONS
    ansible-playbook-3 $ANSIBLE_OPTIONS \
        -e state=started \
        plays/$1.yaml
}

function stop() {
    ansible-playbook-3 $ANSIBLE_OPTIONS \
        -e state=stopped \
        plays/$1.yaml
}

function restart() {
    ansible-playbook-3 $ANSIBLE_OPTIONS \
        -e state=started \
        -e restart=yes \
        plays/$1.yaml
}

function update() {
    ansible-playbook-3 $ANSIBLE_OPTIONS \
        -e state=present \
        -e recreate=yes \
        plays/$1.yaml
}

function clear() {
    ansible-playbook-3 $ANSIBLE_OPTIONS \
        -e state=absent \
        plays/$1.yaml
}

function usage() {
    echo "Usage:"
    echo "    $0 [Options] Command Target"
    echo "Options:"
    echo "    -i:      inventory file"
    echo "Command:"
    echo "    start:   make sure container is started"
    echo "    stop:    make sure container is stopped"
    echo "    restart: stop and start container"
    echo "    update:  pull latest image and force recreate container"
    echo "    clear:   make sure container is absent"
}

function main() {
    ANSIBLE_OPTIONS=''
    while getopts 'i:s' OPT; do
        case $OPT in
            i)
                ANSIBLE_OPTIONS+=" -i $OPTARG"
                ;;
            s)
                ANSIBLE_OPTIONS+=" -e skip_setup=yes"
                ;;
            ?)
                usage && exit 1
        esac
    done
    shift $(($OPTIND - 1))

    #echo "ANSIBLE_OPTIONS: $ANSIBLE_OPTIONS"

    [ $# -lt 2 ] && usage && exit 1

    cd $(dirname $0)

    COMMAND=$1
    shift 1

    while [ $# -gt 0 ]; do
        echo "$COMMAND $1"
        case $COMMAND in
            start)
                start $1
                ;;
            stop)
                stop $1
                ;;
            restart)
                restart $1
                ;;
            update)
                update $1
                ;;
            clear)
                clear $1
                ;;
            *)
                echo "invalid command $COMMAND" && usage && exit 1
                ;;
        esac
        shift 1
    done
}

main $*
