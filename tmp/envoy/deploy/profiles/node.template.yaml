listeners:

- name: listener_local_ingress
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 10000
  filter_chains:
  - filters:
    - name: envoy.filters.network.http_connection_manager
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
        stat_prefix: listener_local_ingress
        route_config:
          name: route_local_ingress
          virtual_hosts:
          - name: route_local_ingress
            domains:
            - "*"
            routes:
            - match:
                prefix: /
              route:
                cluster: cluster_local
                timeout: 0s
        http_filters:
        - name: envoy.filters.http.router
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

- name: listener_local_egress
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 8080
  filter_chains:
  - filters:
    - name: envoy.filters.network.http_connection_manager
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
        stat_prefix: listener_local_egress
        rds:
          config_source:
            ads: {}
            resource_api_version: V3
          route_config_name: route_local_egress
        http_filters:
        - name: envoy.filters.http.router
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

{% for redis in redises %}
- name: listener_redis_{{ redis.name }}
  address:
    socket_address:
      address: 127.0.0.1
      port_value: {{ redis.local_port|default:6379 }}
  filter_chains:
  - filters:
    - name: envoy.filters.network.redis_proxy
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.network.redis_proxy.v3.RedisProxy
        stat_prefix: listener_redis_{{ redis.name }}
        settings:
          op_timeout: 5s
          enable_hashtagging: true
        prefix_routes:
          #routes:
          #- prefix: ""
          #  cluster: ""
          catch_all_route:
            cluster: cluster_redis_{{ redis.name }}
{% endfor %}

{% for mongo in mongoes %}
- name: listener_mongo_{{ mongo.name }}
  address:
    socket_address:
      address: 127.0.0.1
      port_value: {{ mongo.local_port|default:27017 }}
  filter_chains:
  - filters:
    - name: envoy.filters.network.mongo_proxy
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.network.mongo_proxy.v3.MongoProxy
        stat_prefix: listener_mongo_egress
        #access_log: "/var/log/envoy/mongo_access.log"
    - name: envoy.filters.network.tcp_proxy
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
        stat_prefix: listener_mongo_{{ mongo.name }}
        cluster: cluster_mongo_{{ mongo.name }}
{% endfor %}

routes:

- name: route_local_egress
  virtual_hosts:
  - name: local_egress
    domains:
    - "*"
    routes:
    - match:
        prefix: /libra.ptapi
        grpc: {}
      route:
        cluster: cluster_pt
        timeout: 1s
    - match:
        prefix: /libra.gwapi
        grpc: {}
      route:
        cluster: cluster_gw
        timeout: 0s
        hash_policy:
        - header:
            header_name: x-libra-role-id
    - match:
        prefix: /libra.dbapi
        grpc: {}
      route:
        cluster: cluster_db
        timeout: 0s
        hash_policy:
        - header:
            header_name: x-libra-role-id
    {% for app in apps %}
    - match:
        prefix: {{ app.route_prefix }}
        grpc: {}
      route:
        cluster: cluster_app_{{ app.name }}
        timeout: 0s
        {% if app.hash_header %}
        hash_policy:
        - header:
            header_name: {{ app.hash_header }}
        {% endif %}
    {% endfor %}

clusters:

- name: cluster_local
  type: STATIC
  connect_timeout: 0.2s
  http2_protocol_options: {}
  lb_policy: ROUND_ROBIN
  load_assignment:
    cluster_name: cluster_local
    endpoints:
    - lb_endpoints:
      - endpoint:
          address:
            socket_address:
              address: 127.0.0.1
              port_value: 80
  health_checks:
  - timeout: 0.2s
    interval: 1s
    healthy_threshold: 1
    unhealthy_threshold: 3
    grpc_health_check: {}

- name: cluster_pt
  connect_timeout: 0.2s
  http2_protocol_options: {}
  type: EDS
  lb_policy: ROUND_ROBIN
  eds_cluster_config:
    eds_config:
      ads: {}
      resource_api_version: V3
  health_checks:
  - timeout: 0.2s
    interval: 1s
    healthy_threshold: 1
    unhealthy_threshold: 3
    grpc_health_check: {}

- name: cluster_gw
  connect_timeout: 0.2s
  http2_protocol_options: {}
  type: EDS
  lb_policy: MAGLEV
  eds_cluster_config:
    eds_config:
      ads: {}
      resource_api_version: V3
  health_checks:
  - timeout: 0.2s
    interval: 1s
    healthy_threshold: 1
    unhealthy_threshold: 3
    grpc_health_check: {}

- name: cluster_db
  connect_timeout: 0.2s
  http2_protocol_options: {}
  type: EDS
  lb_policy: MAGLEV
  eds_cluster_config:
    eds_config:
      ads: {}
      resource_api_version: V3
  health_checks:
  - timeout: 0.2s
    interval: 1s
    healthy_threshold: 1
    unhealthy_threshold: 3
    grpc_health_check: {}

{% for app in apps %}
- name: cluster_app_{{ app.name }}
  connect_timeout: 0.2s
  http2_protocol_options: {}
  type: EDS
  lb_policy: {{ app.lb_policy|default:'ROUND_ROBIN' }}
  eds_cluster_config:
    eds_config:
      ads: {}
      resource_api_version: V3
  health_checks:
  - timeout: 0.2s
    interval: 1s
    healthy_threshold: 1
    unhealthy_threshold: 3
    grpc_health_check: {}
{% endfor %}

{% for redis in redises %}
- name: cluster_redis_{{ redis.name }}
  connect_timeout: 0.2s
  type: {{ redis.cluster_type|default:'STATIC' }}
  lb_policy: MAGLEV
  load_assignment:
    cluster_name: cluster_redis_{{ redis.name }}
    endpoints:
    - lb_endpoints:
      {% for endpoint in redis.endpoints %}{% set vals = endpoint|split:':' %}
      - endpoint:
          address:
            socket_address:
              address: {{ vals.0 }}
              port_value: {{ vals.1 }}
      {% endfor %}
# type: EDS
# eds_cluster_config:
#   eds_config:
#     ads: {}
#     resource_api_version: V3
# health_checks:
# - timeout: 0.2s
#   interval: 1s
#   healthy_threshold: 1
#   unhealthy_threshold: 3
#   custom_health_check:
#     name: envoy.health_checkers.redis
#     typed_config:
#       "@type": type.googleapis.com/envoy.extensions.filters.network.redis_proxy.v3.RedisProxy
{% endfor %}

{% for mongo in mongoes %}
- name: cluster_mongo_{{ mongo.name }}
  connect_timeout: 0.2s
  type: {{ mongo.cluster_type|default:'STATIC' }}
  lb_policy: MAGLEV
  load_assignment:
    cluster_name: cluster_mongo_{{ mongo.name }}
    endpoints:
    - lb_endpoints:
      {% for endpoint in mongo.endpoints %}{% set vals = endpoint|split:':' %}
      - endpoint:
          address:
            socket_address:
              address: {{ vals.0 }}
              port_value: {{ vals.1 }}
      {% endfor %}
# type: EDS
# eds_cluster_config:
#   eds_config:
#     ads: {}
#     resource_api_version: V3
# health_checks:
{% endfor %}

#endpoints:
#
#{% for redis in redises %}
#{% if redis.endpoints|length > 0 %}
#- cluster_name: cluster_redis_{{ redis.name }}
#  endpoints:
#  - lb_endpoints:
#    {% for endpoint in redis.endpoints %}
#    {% set vals = endpoint|split:':' %}
#    - endpoint:
#        address:
#          socket_address:
#            address: {{ vals.0 }}
#            port_value: {{ vals.1 }}
#    {% endfor %}
#{% endif %}
#{% endfor %}
#
#{% for mongo in mongoes %}
#{% if mongo.endpoints|length > 0 %}
#- cluster_name: cluster_mongo_{{ mongo.name }}
#  endpoints:
#  - lb_endpoints:
#    {% for endpoint in mongo.endpoints %}
#    {% set vals = endpoint|split:':' %}
#    - endpoint:
#        address:
#          socket_address:
#            address: {{ vals.0 }}
#            port_value: {{ vals.1 }}
#    {% endfor %}
#{% endif %}
#{% endfor %}

