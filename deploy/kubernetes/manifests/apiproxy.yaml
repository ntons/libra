apiVersion: v1
kind: Service
metadata:
  name: apiproxy
  namespace: libra
  labels:
    app: apiproxy
spec:
  ports:
  - port: 80
    name: grpc
    nodePort: 31080
  type: NodePort # expose service by NodePort
  selector:
    app: apiproxy
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: apiproxy
  namespace: libra
  labels:
    app: apiproxy
spec:
  selector:
    matchLabels:
      app: apiproxy
  replicas: 2
  template:
    metadata:
      labels:
        app: apiproxy
    spec:
      containers:
      - name: proxy
        image: envoyproxy/envoy-alpine:v1.16-latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        - containerPort: 8000
        volumeMounts:
        - name: config
          mountPath: /etc/envoy
          readOnly: true
      # Configmap mounted volume is implemented as symlinks.
      # But envoy watch file move by inotify, the linked file change
      # would not trigger reload.
      # So that, a helper must exist to watch and move configmap
      # files to envoy directly.
      - name: helper
        image: instrumentisto/rsync-ssh:latest
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: config
          mountPath: /etc/envoy
        - name: source
          mountPath: /tmp/envoy
        command: ["/bin/sh","-c","while true; do rsync -dLptgo --delete /tmp/envoy/ /etc/envoy/ && sleep 1 || break; done"]
      initContainers:
      # to make sure envoy configurations exist when proxy start
      - name: init-helper
        image: instrumentisto/rsync-ssh:latest
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: config
          mountPath: /etc/envoy
        - name: source
          mountPath: /tmp/envoy
        command: ["/bin/sh","-c","rsync -dLptgo --delete /tmp/envoy/ /etc/envoy/"]
      volumes:
      - name: config
        emptyDir: {}
      - name: source
        configMap:
          name: apiproxy
---

